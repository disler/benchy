{
    "benchmark_name": "Simple Typer Commands",
    "purpose": "Evaluate the ability of a language model to convert natural language requests into Typer CLI commands.",
    "models": [
        {
            "model": "anthropic~claude-3-5-sonnet-latest",
            "results": [
                {
                    "prompt_response": {
                        "response": "python main.py ping-server",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2055.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "python main.py show-config --verbose",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1926.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-files /home/user --all",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2118.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "python main.py create-user alice --role admin",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 3183.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "python main.py delete-user user123 --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1801.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "python main.py generate-report sales sales_report.csv --output sales_report.csv",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2661.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales sales_report.csv --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": false,
                    "index": 6
                },
                {
                    "prompt_response": {
                        "response": "python main.py backup-data /var/backups --full",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2099.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py backup-data /var/backups --full",
                    "expected_result": "python main.py backup-data /var/backups --full",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Back up data to /var/backups with a full backup\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 7
                },
                {
                    "prompt_response": {
                        "response": "python main.py restore-data backup.tar --overwrite",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2112.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py restore-data backup.tar --overwrite",
                    "expected_result": "python main.py restore-data backup.tar --overwrite",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Restore data from backup.tar and overwrite existing stuff\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 8
                },
                {
                    "prompt_response": {
                        "response": "python main.py summarize-logs /var/log/app --lines 200",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 3170.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "expected_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Summarize logs from /var/log/app, show 200 lines\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 9
                },
                {
                    "prompt_response": {
                        "response": "python main.py upload-file data.csv --destination staging --secure",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2673.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-file data.csv --destination staging --secure",
                    "expected_result": "python main.py upload-file data.csv --destination staging --secure",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload the file data.csv to staging with secure upload\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 10
                },
                {
                    "prompt_response": {
                        "response": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2057.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "expected_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Download from http://example.com/myfile.zip to downloads and retry 5 times\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 11
                },
                {
                    "prompt_response": {
                        "response": "python main.py filter-records database --query \"name='john'\" --limit 2",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2023.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py filter-records database --query \"name='john'\" --limit 2",
                    "expected_result": "python main.py filter-records database --query name='john' --limit 2",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Filter records from database using name='john' and limit to 2 results\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": false,
                    "index": 12
                },
                {
                    "prompt_response": {
                        "response": "python main.py validate-schema schema.json --data record1.json --strict",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2118.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "expected_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Validate schema in schema.json with data file record1.json in strict mode\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 13
                },
                {
                    "prompt_response": {
                        "response": "python main.py sync-remotes origin --force",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1633.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py sync-remotes origin --force",
                    "expected_result": "python main.py sync-remotes origin --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Sync the remote called origin forcefully\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 14
                },
                {
                    "prompt_response": {
                        "response": "python main.py simulate-run test_scenario --cycles 10 --debug",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2116.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "expected_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Simulate run scenario test_scenario for 10 cycles in debug mode\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 15
                },
                {
                    "prompt_response": {
                        "response": "python main.py compare-files old.txt new.txt --diff-only",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2275.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "expected_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Compare file old.txt and new.txt only showing differences\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 16
                },
                {
                    "prompt_response": {
                        "response": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1629.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "expected_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Encrypt doc.txt with AES and output secret.dat\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 17
                },
                {
                    "prompt_response": {
                        "response": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2224.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "expected_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Decrypt secrets.bin with key=abcd1234 and write to plain.txt\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 18
                },
                {
                    "prompt_response": {
                        "response": "python main.py transform-data export.csv --format yaml --columns name,email",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1850.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "expected_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Transform the data in export.csv to YAML format extracting only name,email columns\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 19
                },
                {
                    "prompt_response": {
                        "response": "python main.py upload-changes local-changes --incremental --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2156.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "expected_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload changes from the local-changes folder with incremental and skip confirmation\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 20
                },
                {
                    "prompt_response": {
                        "response": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1671.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "expected_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Migrate the DB from legacy.db to new.db in dry run mode\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 21
                },
                {
                    "prompt_response": {
                        "response": "python main.py health-check order-processor --timeout 45 --alert",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1976.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "expected_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Perform a health check on service order-processor with a 45-second timeout and send an alert if it fails\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 22
                },
                {
                    "prompt_response": {
                        "response": "python main.py search-logs ERROR --log error.log --case-sensitive",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1481.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "expected_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Search for the word 'ERROR' in error.log in case-sensitive mode\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 23
                },
                {
                    "prompt_response": {
                        "response": "python main.py stats-by-date 2025-03-12",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1747.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py stats-by-date 2025-03-12",
                    "expected_result": "python main.py stats-by-date 2025-03-12",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me stats for date 2025-03-12 and do not display raw data\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 24
                },
                {
                    "prompt_response": {
                        "response": "python main.py publish-update 2.0.1 --channel beta --note \"Beta release\"",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2700.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py publish-update 2.0.1 --channel beta --note \"Beta release\"",
                    "expected_result": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Publish an update with version 2.0.1 to the beta channel with note 'Beta release'\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": false,
                    "index": 25
                },
                {
                    "prompt_response": {
                        "response": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2376.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "expected_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Check the version of the app folder with remote https://example.com/myrepo and show details\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 26
                },
                {
                    "prompt_response": {
                        "response": "python main.py queue-task generate-stats --priority 2 --delay 30",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1498.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "expected_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Queue a task named generate-stats with priority 2 and delay 30 seconds\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 27
                },
                {
                    "prompt_response": {
                        "response": "python main.py remove-task 12345 --force",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2010.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py remove-task 12345 --force",
                    "expected_result": "python main.py remove-task 12345 --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Remove the task ID 12345 forcibly\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 28
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-tasks --all --sort-by priority",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 1202.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-tasks --all --sort-by priority",
                    "expected_result": "python main.py list-tasks --all --sort-by priority",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  List tasks including completed ones sorted by priority\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 29
                },
                {
                    "prompt_response": {
                        "response": "python main.py inspect-task abcdef --json",
                        "tokens_per_second": 0.0,
                        "provider": "anthropic",
                        "total_duration_ms": 2441.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py inspect-task abcdef --json",
                    "expected_result": "python main.py inspect-task abcdef --json",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Inspect task with ID abcdef in JSON format\n</stt-requests>\n",
                    "model": "anthropic~claude-3-5-sonnet-latest",
                    "correct": true,
                    "index": 30
                }
            ],
            "correct_count": 27,
            "incorrect_count": 3,
            "accuracy": 0.9,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 2099.366666666667,
            "average_load_duration_ms": 0.0
        },
        {
            "model": "deepseek~deepseek-chat",
            "results": [
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py ping-server\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1845.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py show-config --verbose\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2117.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-files /home/user --all",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2267.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py create-user alice --role admin\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 3202.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py delete-user user123 --confirm\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2499.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "python main.py generate-report sales --output sales_report.csv",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2404.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 6
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py backup-data /var/backups --full\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2249.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py backup-data /var/backups --full",
                    "expected_result": "python main.py backup-data /var/backups --full",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Back up data to /var/backups with a full backup\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 7
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py restore-data backup.tar --overwrite\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2252.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py restore-data backup.tar --overwrite",
                    "expected_result": "python main.py restore-data backup.tar --overwrite",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Restore data from backup.tar and overwrite existing stuff\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 8
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py summarize-logs /var/log/app --lines 200\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2506.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "expected_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Summarize logs from /var/log/app, show 200 lines\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 9
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py upload-file data.csv --destination staging --secure\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2261.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-file data.csv --destination staging --secure",
                    "expected_result": "python main.py upload-file data.csv --destination staging --secure",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload the file data.csv to staging with secure upload\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 10
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py download-file http://example.com/myfile.zip --output downloads --retry 5\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2842.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "expected_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Download from http://example.com/myfile.zip to downloads and retry 5 times\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 11
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py filter-records database --query \"name='john'\" --limit 2\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2358.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py filter-records database --query \"name='john'\" --limit 2",
                    "expected_result": "python main.py filter-records database --query name='john' --limit 2",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Filter records from database using name='john' and limit to 2 results\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": false,
                    "index": 12
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py validate-schema schema.json --data record1.json --strict\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2392.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "expected_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Validate schema in schema.json with data file record1.json in strict mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 13
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py sync-remotes origin --force\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 3467.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py sync-remotes origin --force",
                    "expected_result": "python main.py sync-remotes origin --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Sync the remote called origin forcefully\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 14
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py simulate-run test_scenario --cycles 10 --debug\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2467.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "expected_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Simulate run scenario test_scenario for 10 cycles in debug mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 15
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py compare-files old.txt new.txt --diff-only\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2147.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "expected_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Compare file old.txt and new.txt only showing differences\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 16
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py encrypt-data doc.txt --output secret.dat --algorithm AES\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2045.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "expected_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Encrypt doc.txt with AES and output secret.dat\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 17
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1765.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "expected_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Decrypt secrets.bin with key=abcd1234 and write to plain.txt\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 18
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py transform-data export.csv --format yaml --columns name,email\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1962.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "expected_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Transform the data in export.csv to YAML format extracting only name,email columns\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 19
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py upload-changes local-changes --incremental --confirm\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2518.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "expected_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload changes from the local-changes folder with incremental and skip confirmation\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 20
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py migrate-database legacy.db --new-db new.db --dry-run\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2191.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "expected_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Migrate the DB from legacy.db to new.db in dry run mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 21
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py health-check order-processor --timeout 45 --alert\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1994.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "expected_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Perform a health check on service order-processor with a 45-second timeout and send an alert if it fails\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 22
                },
                {
                    "prompt_response": {
                        "response": "python main.py search-logs ERROR --log error.log --case-sensitive",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1879.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "expected_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Search for the word 'ERROR' in error.log in case-sensitive mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 23
                },
                {
                    "prompt_response": {
                        "response": "python main.py stats-by-date 2025-03-12",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2524.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py stats-by-date 2025-03-12",
                    "expected_result": "python main.py stats-by-date 2025-03-12",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me stats for date 2025-03-12 and do not display raw data\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 24
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py publish-update 2.0.1 --channel beta --note \"Beta release\"\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1949.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py publish-update 2.0.1 --channel beta --note \"Beta release\"",
                    "expected_result": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Publish an update with version 2.0.1 to the beta channel with note 'Beta release'\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": false,
                    "index": 25
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py check-version app --remote https://example.com/myrepo --detailed\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1821.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "expected_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Check the version of the app folder with remote https://example.com/myrepo and show details\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 26
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py queue-task generate-stats --priority 2 --delay 30\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 2127.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "expected_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Queue a task named generate-stats with priority 2 and delay 30 seconds\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 27
                },
                {
                    "prompt_response": {
                        "response": "python main.py remove-task 12345 --force",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1533.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py remove-task 12345 --force",
                    "expected_result": "python main.py remove-task 12345 --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Remove the task ID 12345 forcibly\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 28
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py list-tasks --all --sort-by priority\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1677.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-tasks --all --sort-by priority",
                    "expected_result": "python main.py list-tasks --all --sort-by priority",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  List tasks including completed ones sorted by priority\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 29
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py inspect-task abcdef --json\n```",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 1937.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py inspect-task abcdef --json",
                    "expected_result": "python main.py inspect-task abcdef --json",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Inspect task with ID abcdef in JSON format\n</stt-requests>\n",
                    "model": "deepseek~deepseek-chat",
                    "correct": true,
                    "index": 30
                }
            ],
            "correct_count": 28,
            "incorrect_count": 2,
            "accuracy": 0.9333333333333333,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 2239.9,
            "average_load_duration_ms": 0.0
        },
        {
            "model": "deepseek~deepseek-reasoner",
            "results": [
                {
                    "prompt_response": {
                        "response": "python main.py ping-server",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5346.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "python main.py show-config --verbose",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 3273.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-files /home/user --all",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 3576.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "python main.py create-user alice --role admin",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4557.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "python main.py delete-user user123 --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4002.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "python main.py generate-report sales --output sales_report.csv",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4629.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 6
                },
                {
                    "prompt_response": {
                        "response": "python main.py backup-data /var/backups --full",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6050.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py backup-data /var/backups --full",
                    "expected_result": "python main.py backup-data /var/backups --full",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Back up data to /var/backups with a full backup\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 7
                },
                {
                    "prompt_response": {
                        "response": "python main.py restore-data backup.tar --overwrite",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 3808.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py restore-data backup.tar --overwrite",
                    "expected_result": "python main.py restore-data backup.tar --overwrite",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Restore data from backup.tar and overwrite existing stuff\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 8
                },
                {
                    "prompt_response": {
                        "response": "python main.py summarize-logs /var/log/app --lines 200",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6509.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "expected_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Summarize logs from /var/log/app, show 200 lines\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 9
                },
                {
                    "prompt_response": {
                        "response": "python main.py upload-file data.csv --destination staging --secure",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6076.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-file data.csv --destination staging --secure",
                    "expected_result": "python main.py upload-file data.csv --destination staging --secure",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload the file data.csv to staging with secure upload\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 10
                },
                {
                    "prompt_response": {
                        "response": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6202.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "expected_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Download from http://example.com/myfile.zip to downloads and retry 5 times\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 11
                },
                {
                    "prompt_response": {
                        "response": "python main.py filter-records database --query \"name='john'\" --limit 2",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5828.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py filter-records database --query \"name='john'\" --limit 2",
                    "expected_result": "python main.py filter-records database --query name='john' --limit 2",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Filter records from database using name='john' and limit to 2 results\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": false,
                    "index": 12
                },
                {
                    "prompt_response": {
                        "response": "python main.py validate-schema schema.json --data record1.json --strict",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4851.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "expected_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Validate schema in schema.json with data file record1.json in strict mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 13
                },
                {
                    "prompt_response": {
                        "response": "python main.py sync-remotes origin --force",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5125.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py sync-remotes origin --force",
                    "expected_result": "python main.py sync-remotes origin --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Sync the remote called origin forcefully\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 14
                },
                {
                    "prompt_response": {
                        "response": "python main.py simulate-run test_scenario --cycles 10 --debug",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5668.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "expected_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Simulate run scenario test_scenario for 10 cycles in debug mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 15
                },
                {
                    "prompt_response": {
                        "response": "python main.py compare-files old.txt new.txt --diff-only",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5175.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "expected_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Compare file old.txt and new.txt only showing differences\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 16
                },
                {
                    "prompt_response": {
                        "response": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5119.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "expected_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Encrypt doc.txt with AES and output secret.dat\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 17
                },
                {
                    "prompt_response": {
                        "response": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5220.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "expected_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Decrypt secrets.bin with key=abcd1234 and write to plain.txt\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 18
                },
                {
                    "prompt_response": {
                        "response": "python main.py transform-data export.csv --format yaml --columns name,email",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4643.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "expected_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Transform the data in export.csv to YAML format extracting only name,email columns\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 19
                },
                {
                    "prompt_response": {
                        "response": "python main.py upload-changes local-changes --incremental --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6108.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "expected_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload changes from the local-changes folder with incremental and skip confirmation\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 20
                },
                {
                    "prompt_response": {
                        "response": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6029.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "expected_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Migrate the DB from legacy.db to new.db in dry run mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 21
                },
                {
                    "prompt_response": {
                        "response": "python main.py health-check order-processor --timeout 45 --alert",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4770.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "expected_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Perform a health check on service order-processor with a 45-second timeout and send an alert if it fails\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 22
                },
                {
                    "prompt_response": {
                        "response": "python main.py search-logs ERROR --log error.log --case-sensitive",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5366.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "expected_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Search for the word 'ERROR' in error.log in case-sensitive mode\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 23
                },
                {
                    "prompt_response": {
                        "response": "python main.py stats-by-date 2025-03-12",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4864.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py stats-by-date 2025-03-12",
                    "expected_result": "python main.py stats-by-date 2025-03-12",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me stats for date 2025-03-12 and do not display raw data\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 24
                },
                {
                    "prompt_response": {
                        "response": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 7061.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                    "expected_result": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Publish an update with version 2.0.1 to the beta channel with note 'Beta release'\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 25
                },
                {
                    "prompt_response": {
                        "response": "python main.py check-version \"app folder\" --remote https://example.com/myrepo --detailed",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 5711.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py check-version \"app folder\" --remote https://example.com/myrepo --detailed",
                    "expected_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Check the version of the app folder with remote https://example.com/myrepo and show details\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": false,
                    "index": 26
                },
                {
                    "prompt_response": {
                        "response": "python main.py queue-task generate-stats --priority 2 --delay 30",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 4825.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "expected_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Queue a task named generate-stats with priority 2 and delay 30 seconds\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 27
                },
                {
                    "prompt_response": {
                        "response": "python main.py remove-task 12345 --force",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 3638.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py remove-task 12345 --force",
                    "expected_result": "python main.py remove-task 12345 --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Remove the task ID 12345 forcibly\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 28
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-tasks --all --sort-by priority",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6528.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-tasks --all --sort-by priority",
                    "expected_result": "python main.py list-tasks --all --sort-by priority",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  List tasks including completed ones sorted by priority\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 29
                },
                {
                    "prompt_response": {
                        "response": "python main.py inspect-task abcdef --json",
                        "tokens_per_second": 0.0,
                        "provider": "deepseek",
                        "total_duration_ms": 6256.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py inspect-task abcdef --json",
                    "expected_result": "python main.py inspect-task abcdef --json",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Inspect task with ID abcdef in JSON format\n</stt-requests>\n",
                    "model": "deepseek~deepseek-reasoner",
                    "correct": true,
                    "index": 30
                }
            ],
            "correct_count": 28,
            "incorrect_count": 2,
            "accuracy": 0.9333333333333333,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 5227.1,
            "average_load_duration_ms": 0.0
        },
        {
            "model": "openai~o1",
            "results": [
                {
                    "prompt_response": {
                        "response": "python main.py ping-server",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3695.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "python main.py show-config --verbose",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4862.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-files /home/user --all",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2944.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "python main.py create-user alice --role admin",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3061.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "python main.py delete-user user123 --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2654.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "python main.py generate-report sales --output sales_report.csv",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4886.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 6
                },
                {
                    "prompt_response": {
                        "response": "python main.py backup-data /var/backups --full",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2929.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py backup-data /var/backups --full",
                    "expected_result": "python main.py backup-data /var/backups --full",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Back up data to /var/backups with a full backup\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 7
                },
                {
                    "prompt_response": {
                        "response": "python main.py restore-data backup.tar --overwrite",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3718.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py restore-data backup.tar --overwrite",
                    "expected_result": "python main.py restore-data backup.tar --overwrite",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Restore data from backup.tar and overwrite existing stuff\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 8
                },
                {
                    "prompt_response": {
                        "response": "python main.py summarize-logs /var/log/app --lines 200",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3881.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "expected_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Summarize logs from /var/log/app, show 200 lines\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 9
                },
                {
                    "prompt_response": {
                        "response": "python main.py upload-file data.csv --destination staging --secure",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3188.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-file data.csv --destination staging --secure",
                    "expected_result": "python main.py upload-file data.csv --destination staging --secure",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload the file data.csv to staging with secure upload\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 10
                },
                {
                    "prompt_response": {
                        "response": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4791.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "expected_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Download from http://example.com/myfile.zip to downloads and retry 5 times\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 11
                },
                {
                    "prompt_response": {
                        "response": "python main.py filter-records database --query \"name='john'\" --limit 2",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4655.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py filter-records database --query \"name='john'\" --limit 2",
                    "expected_result": "python main.py filter-records database --query name='john' --limit 2",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Filter records from database using name='john' and limit to 2 results\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": false,
                    "index": 12
                },
                {
                    "prompt_response": {
                        "response": "python main.py validate-schema schema.json --data record1.json --strict",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4239.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "expected_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Validate schema in schema.json with data file record1.json in strict mode\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 13
                },
                {
                    "prompt_response": {
                        "response": "python main.py sync-remotes origin --force",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2815.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py sync-remotes origin --force",
                    "expected_result": "python main.py sync-remotes origin --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Sync the remote called origin forcefully\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 14
                },
                {
                    "prompt_response": {
                        "response": "python main.py simulate-run test_scenario --cycles 10 --debug",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3631.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "expected_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Simulate run scenario test_scenario for 10 cycles in debug mode\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 15
                },
                {
                    "prompt_response": {
                        "response": "python main.py compare-files old.txt new.txt --diff-only",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3102.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "expected_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Compare file old.txt and new.txt only showing differences\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 16
                },
                {
                    "prompt_response": {
                        "response": "python main.py encrypt-data doc.txt --algorithm AES --output secret.dat",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4911.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py encrypt-data doc.txt --algorithm AES --output secret.dat",
                    "expected_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Encrypt doc.txt with AES and output secret.dat\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": false,
                    "index": 17
                },
                {
                    "prompt_response": {
                        "response": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4701.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "expected_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Decrypt secrets.bin with key=abcd1234 and write to plain.txt\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 18
                },
                {
                    "prompt_response": {
                        "response": "python main.py transform-data export.csv --format yaml --columns name,email",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 6574.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "expected_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Transform the data in export.csv to YAML format extracting only name,email columns\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 19
                },
                {
                    "prompt_response": {
                        "response": "python main.py upload-changes local-changes --incremental --confirm",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4085.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "expected_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload changes from the local-changes folder with incremental and skip confirmation\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 20
                },
                {
                    "prompt_response": {
                        "response": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3887.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "expected_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Migrate the DB from legacy.db to new.db in dry run mode\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 21
                },
                {
                    "prompt_response": {
                        "response": "python main.py health-check order-processor --timeout 45 --alert",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3180.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "expected_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Perform a health check on service order-processor with a 45-second timeout and send an alert if it fails\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 22
                },
                {
                    "prompt_response": {
                        "response": "python main.py search-logs ERROR --log error.log --case-sensitive",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3410.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "expected_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Search for the word 'ERROR' in error.log in case-sensitive mode\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 23
                },
                {
                    "prompt_response": {
                        "response": "python main.py stats-by-date 2025-03-12",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 5988.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py stats-by-date 2025-03-12",
                    "expected_result": "python main.py stats-by-date 2025-03-12",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me stats for date 2025-03-12 and do not display raw data\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 24
                },
                {
                    "prompt_response": {
                        "response": "python main.py publish-update 2.0.1 --channel beta --note \"Beta release\"",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3389.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py publish-update 2.0.1 --channel beta --note \"Beta release\"",
                    "expected_result": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Publish an update with version 2.0.1 to the beta channel with note 'Beta release'\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": false,
                    "index": 25
                },
                {
                    "prompt_response": {
                        "response": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4553.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "expected_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Check the version of the app folder with remote https://example.com/myrepo and show details\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 26
                },
                {
                    "prompt_response": {
                        "response": "python main.py queue-task generate-stats --priority 2 --delay 30",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 7053.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "expected_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Queue a task named generate-stats with priority 2 and delay 30 seconds\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 27
                },
                {
                    "prompt_response": {
                        "response": "python main.py remove-task 12345 --force",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3447.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py remove-task 12345 --force",
                    "expected_result": "python main.py remove-task 12345 --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Remove the task ID 12345 forcibly\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 28
                },
                {
                    "prompt_response": {
                        "response": "python main.py list-tasks --all --sort-by priority",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2338.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-tasks --all --sort-by priority",
                    "expected_result": "python main.py list-tasks --all --sort-by priority",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  List tasks including completed ones sorted by priority\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 29
                },
                {
                    "prompt_response": {
                        "response": "python main.py inspect-task abcdef --json",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2235.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py inspect-task abcdef --json",
                    "expected_result": "python main.py inspect-task abcdef --json",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Inspect task with ID abcdef in JSON format\n</stt-requests>\n",
                    "model": "openai~o1",
                    "correct": true,
                    "index": 30
                }
            ],
            "correct_count": 27,
            "incorrect_count": 3,
            "accuracy": 0.9,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 3960.0666666666666,
            "average_load_duration_ms": 0.0
        },
        {
            "model": "openai~o1-mini",
            "results": [
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py ping-server\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3996.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py ping-server",
                    "expected_result": "python main.py ping-server",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Ping the server quickly\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 1
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py show-config --verbose\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3997.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py show-config --verbose",
                    "expected_result": "python main.py show-config --verbose",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me the configuration details\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 2
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py list-files /home/user --all\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2762.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-files /home/user --all",
                    "expected_result": "python main.py list-files /home/user --all",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Please list files in /home/user including hidden ones\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 3
                },
                {
                    "prompt_response": {
                        "response": "python main.py create-user alice --role admin",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3469.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py create-user alice --role admin",
                    "expected_result": "python main.py create-user alice --role admin",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Create a new user named alice with role admin\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 4
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py delete-user user123 --confirm\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2909.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py delete-user user123 --confirm",
                    "expected_result": "python main.py delete-user user123 --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Delete user with ID user123, skip confirmation\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 5
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py generate-report sales --output sales_report.csv\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3989.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py generate-report sales --output sales_report.csv",
                    "expected_result": "python main.py generate-report sales --output sales_report.csv",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Generate a sales report in the file sales_report.csv\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 6
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py backup-data /var/backups --full\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2755.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py backup-data /var/backups --full",
                    "expected_result": "python main.py backup-data /var/backups --full",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Back up data to /var/backups with a full backup\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 7
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py restore-data backup.tar --overwrite\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2735.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py restore-data backup.tar --overwrite",
                    "expected_result": "python main.py restore-data backup.tar --overwrite",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Restore data from backup.tar and overwrite existing stuff\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 8
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py summarize-logs /var/log/app --lines 200\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 5119.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "expected_result": "python main.py summarize-logs /var/log/app --lines 200",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Summarize logs from /var/log/app, show 200 lines\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 9
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py upload-file data.csv --destination staging --secure\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3641.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-file data.csv --destination staging --secure",
                    "expected_result": "python main.py upload-file data.csv --destination staging --secure",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload the file data.csv to staging with secure upload\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 10
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py download-file http://example.com/myfile.zip downloads --retry 5\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2799.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py download-file http://example.com/myfile.zip downloads --retry 5",
                    "expected_result": "python main.py download-file http://example.com/myfile.zip --output downloads --retry 5",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Download from http://example.com/myfile.zip to downloads and retry 5 times\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": false,
                    "index": 11
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py filter-records database --query \"name='john'\" --limit 2\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 6159.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py filter-records database --query \"name='john'\" --limit 2",
                    "expected_result": "python main.py filter-records database --query name='john' --limit 2",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Filter records from database using name='john' and limit to 2 results\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": false,
                    "index": 12
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py validate-schema schema.json --data record1.json --strict\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4475.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "expected_result": "python main.py validate-schema schema.json --data record1.json --strict",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Validate schema in schema.json with data file record1.json in strict mode\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 13
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py sync-remotes origin --force\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 5085.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py sync-remotes origin --force",
                    "expected_result": "python main.py sync-remotes origin --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Sync the remote called origin forcefully\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 14
                },
                {
                    "prompt_response": {
                        "response": "python main.py simulate-run test_scenario --cycles 10 --debug",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 6355.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "expected_result": "python main.py simulate-run test_scenario --cycles 10 --debug",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Simulate run scenario test_scenario for 10 cycles in debug mode\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 15
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py compare-files old.txt new.txt --diff-only\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4658.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "expected_result": "python main.py compare-files old.txt new.txt --diff-only",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Compare file old.txt and new.txt only showing differences\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 16
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py encrypt-data doc.txt --algorithm AES --output secret.dat\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 6186.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py encrypt-data doc.txt --algorithm AES --output secret.dat",
                    "expected_result": "python main.py encrypt-data doc.txt --output secret.dat --algorithm AES",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Encrypt doc.txt with AES and output secret.dat\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": false,
                    "index": 17
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3838.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "expected_result": "python main.py decrypt-data secrets.bin --key abcd1234 --output plain.txt",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Decrypt secrets.bin with key=abcd1234 and write to plain.txt\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 18
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py transform-data export.csv --format yaml --columns name,email\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 2956.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "expected_result": "python main.py transform-data export.csv --format yaml --columns name,email",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Transform the data in export.csv to YAML format extracting only name,email columns\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 19
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py upload-changes local-changes --incremental --confirm\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3596.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "expected_result": "python main.py upload-changes local-changes --incremental --confirm",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Upload changes from the local-changes folder with incremental and skip confirmation\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 20
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py migrate-database legacy.db --new-db new.db --dry-run\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3116.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "expected_result": "python main.py migrate-database legacy.db --new-db new.db --dry-run",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Migrate the DB from legacy.db to new.db in dry run mode\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 21
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py health-check order-processor --timeout 45 --alert\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 5383.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "expected_result": "python main.py health-check order-processor --timeout 45 --alert",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Perform a health check on service order-processor with a 45-second timeout and send an alert if it fails\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 22
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py search-logs ERROR --log error.log --case-sensitive\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 6326.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "expected_result": "python main.py search-logs ERROR --log error.log --case-sensitive",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Search for the word 'ERROR' in error.log in case-sensitive mode\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 23
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py stats-by-date 2025-03-12\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 5421.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py stats-by-date 2025-03-12",
                    "expected_result": "python main.py stats-by-date 2025-03-12",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Show me stats for date 2025-03-12 and do not display raw data\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 24
                },
                {
                    "prompt_response": {
                        "response": "```bash\npython main.py publish-update 2.0.1 --channel beta --note \"Beta release\"\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4433.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py publish-update 2.0.1 --channel beta --note \"Beta release\"",
                    "expected_result": "python main.py publish-update 2.0.1 --channel beta --note 'Beta release'",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Publish an update with version 2.0.1 to the beta channel with note 'Beta release'\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": false,
                    "index": 25
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py check-version app --remote https://example.com/myrepo --detailed\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3060.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "expected_result": "python main.py check-version app --remote https://example.com/myrepo --detailed",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Check the version of the app folder with remote https://example.com/myrepo and show details\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 26
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py queue-task generate-stats --priority 2 --delay 30\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 9628.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "expected_result": "python main.py queue-task generate-stats --priority 2 --delay 30",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Queue a task named generate-stats with priority 2 and delay 30 seconds\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 27
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py remove-task 12345 --force\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3497.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py remove-task 12345 --force",
                    "expected_result": "python main.py remove-task 12345 --force",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Remove the task ID 12345 forcibly\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 28
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py list-tasks --all --sort-by priority\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 4812.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py list-tasks --all --sort-by priority",
                    "expected_result": "python main.py list-tasks --all --sort-by priority",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  List tasks including completed ones sorted by priority\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 29
                },
                {
                    "prompt_response": {
                        "response": "```plaintext\npython main.py inspect-task abcdef --json\n```",
                        "tokens_per_second": 0.0,
                        "provider": "openai",
                        "total_duration_ms": 3185.0,
                        "load_duration_ms": 0.0,
                        "errored": null
                    },
                    "execution_result": "python main.py inspect-task abcdef --json",
                    "expected_result": "python main.py inspect-task abcdef --json",
                    "input_prompt": "<purpose>\n    We want the LLM to parse the given natural language request (stt_request) and produce the correct CLI command.\n    Then we can run that command with Typer in a Python script named main.py.\n</purpose>\n\n<instructions>\n    <instruction>We only want the CLI command as output. No explanations or additional text.</instruction>\n    <instruction>Focus on generating a Typer-based command line that can be used with a Python script called main.py.</instruction>\n    <instruction>All commands must be fully spelled out with arguments and flags exactly as required by the stt_request.</instruction>\n    <instruction>Make sure to include `python main.py` at the start of the command.</instruction>\n    <instruction>Be sure to use - for the function names instead of _</instruction>\n    <instruction>Don't use = for arguments, use spaces instead</instruction>\n</instructions>\n\n<python-typer-commands>\n  import typer\n  from typing import Optional\n\n  app = typer.Typer()\n\n  @app.command()\n  def ping_server(\n      wait: bool = typer.Option(False, \"--wait\", help=\"Wait for server response?\")\n  ):\n      \"\"\"\n      Pings the server, optionally waiting for a response.\n      \"\"\"\n      pass\n\n  @app.command()\n  def show_config(\n      verbose: bool = typer.Option(False, \"--verbose\", help=\"Show config in detail?\")\n  ):\n      \"\"\"\n      Shows the current configuration.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_files(\n      path: str = typer.Argument(..., help=\"Path to list files from\"),\n      all_files: bool = typer.Option(False, \"--all\", help=\"Include hidden files\")\n  ):\n      \"\"\"\n      Lists files in a directory. Optionally show hidden files.\n      \"\"\"\n      pass\n\n  @app.command()\n  def create_user(\n      username: str = typer.Argument(..., help=\"Name of the new user\"),\n      role: str = typer.Option(\"guest\", \"--role\", help=\"Role for the new user\")\n  ):\n      \"\"\"\n      Creates a new user with an optional role.\n      \"\"\"\n      pass\n\n  @app.command()\n  def delete_user(\n      user_id: str = typer.Argument(..., help=\"ID of user to delete\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Deletes a user by ID.\n      \"\"\"\n      pass\n\n  @app.command()\n  def generate_report(\n      report_type: str = typer.Argument(..., help=\"Type of report to generate\"),\n      output_file: str = typer.Option(\"report.json\", \"--output\", help=\"Output file name\")\n  ):\n      \"\"\"\n      Generates a report of a specified type to a given file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def backup_data(\n      directory: str = typer.Argument(..., help=\"Directory to store backups\"),\n      full: bool = typer.Option(False, \"--full\", help=\"Perform a full backup\")\n  ):\n      \"\"\"\n      Back up data to a specified directory, optionally performing a full backup.\n      \"\"\"\n      pass\n\n  @app.command()\n  def restore_data(\n      file_path: str = typer.Argument(..., help=\"File path of backup to restore\"),\n      overwrite: bool = typer.Option(False, \"--overwrite\", help=\"Overwrite existing data\")\n  ):\n      \"\"\"\n      Restores data from a backup file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def summarize_logs(\n      logs_path: str = typer.Argument(..., help=\"Path to log files\"),\n      lines: int = typer.Option(100, \"--lines\", help=\"Number of lines to summarize\")\n  ):\n      \"\"\"\n      Summarizes log data from a specified path, limiting lines.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_file(\n      file_path: str = typer.Argument(..., help=\"Path of file to upload\"),\n      destination: str = typer.Option(\"remote\", \"--destination\", help=\"Destination label\"),\n      secure: bool = typer.Option(True, \"--secure\", help=\"Use secure upload\")\n  ):\n      \"\"\"\n      Uploads a file to a destination, optionally enforcing secure upload.\n      \"\"\"\n      pass\n\n  @app.command()\n  def download_file(\n      url: str = typer.Argument(..., help=\"URL of file to download\"),\n      output_path: str = typer.Option(\".\", \"--output\", help=\"Local output path\"),\n      retry: int = typer.Option(3, \"--retry\", help=\"Number of times to retry\")\n  ):\n      \"\"\"\n      Downloads a file from a URL with a specified number of retries.\n      \"\"\"\n      pass\n\n  @app.command()\n  def filter_records(\n      source: str = typer.Argument(..., help=\"Data source to filter\"),\n      query: str = typer.Option(\"\", \"--query\", help=\"Filtering query string\"),\n      limit: int = typer.Option(10, \"--limit\", help=\"Limit the number of results\")\n  ):\n      \"\"\"\n      Filters records from a data source using a query, limiting the number of results.\n      \"\"\"\n      pass\n\n  @app.command()\n  def validate_schema(\n      schema_file: str = typer.Argument(..., help=\"Path to schema file\"),\n      data_file: str = typer.Option(\"\", \"--data\", help=\"Path to data file to check\"),\n      strict: bool = typer.Option(True, \"--strict\", help=\"Enforce strict validation\")\n  ):\n      \"\"\"\n      Validates a schema, optionally checking a data file with strict mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def sync_remotes(\n      remote_name: str = typer.Argument(..., help=\"Name of remote to sync\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Force syncing without prompting\")\n  ):\n      \"\"\"\n      Syncs with a remote repository, optionally forcing the operation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def simulate_run(\n      scenario: str = typer.Argument(..., help=\"Simulation scenario\"),\n      cycles: int = typer.Option(5, \"--cycles\", help=\"Number of cycles to simulate\"),\n      debug: bool = typer.Option(False, \"--debug\", help=\"Show debug output\")\n  ):\n      \"\"\"\n      Simulates a scenario for a given number of cycles, optionally showing debug output.\n      \"\"\"\n      pass\n\n  @app.command()\n  def compare_files(\n      file_a: str = typer.Argument(..., help=\"First file to compare\"),\n      file_b: str = typer.Argument(..., help=\"Second file to compare\"),\n      diff_only: bool = typer.Option(False, \"--diff-only\", help=\"Show only the differences\")\n  ):\n      \"\"\"\n      Compares two files, optionally showing only differences.\n      \"\"\"\n      pass\n\n  @app.command()\n  def encrypt_data(\n      input_path: str = typer.Argument(..., help=\"Path of the file to encrypt\"),\n      output_path: str = typer.Option(\"encrypted.bin\", \"--output\", help=\"Output file\"),\n      algorithm: str = typer.Option(\"AES\", \"--algorithm\", help=\"Encryption algorithm\"),\n  ):\n      \"\"\"\n      Encrypts data using a specified algorithm and writes to an output file.\n      \"\"\"\n      pass\n\n  @app.command()\n  def decrypt_data(\n      encrypted_file: str = typer.Argument(..., help=\"Path to encrypted file\"),\n      key: str = typer.Option(..., \"--key\", help=\"Decryption key\"),\n      output_path: str = typer.Option(\"decrypted.txt\", \"--output\", help=\"Output file\")\n  ):\n      \"\"\"\n      Decrypts an encrypted file using a key.\n      \"\"\"\n      pass\n\n  @app.command()\n  def transform_data(\n      input_file: str = typer.Argument(..., help=\"File to transform\"),\n      output_format: str = typer.Option(\"json\", \"--format\", help=\"Output format\"),\n      columns: str = typer.Option(None, \"--columns\", help=\"Comma-separated columns to extract\")\n  ):\n      \"\"\"\n      Transforms data from a file into a specified format, optionally extracting columns.\n      \"\"\"\n      pass\n\n  @app.command()\n  def upload_changes(\n      source_dir: str = typer.Argument(..., help=\"Directory of changes to upload\"),\n      incremental: bool = typer.Option(False, \"--incremental\", help=\"Incremental upload\"),\n      confirm: bool = typer.Option(False, \"--confirm\", help=\"Skip confirmation prompt\")\n  ):\n      \"\"\"\n      Uploads changes from a directory, optionally in incremental mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def migrate_database(\n      old_db: str = typer.Argument(..., help=\"Path to old database\"),\n      new_db: str = typer.Option(..., \"--new-db\", help=\"Path to new database\"),\n      dry_run: bool = typer.Option(False, \"--dry-run\", help=\"Perform a trial run without changing data\")\n  ):\n      \"\"\"\n      Migrates data from an old database to a new one, optionally doing a dry run.\n      \"\"\"\n      pass\n\n  @app.command()\n  def health_check(\n      service_name: str = typer.Argument(..., help=\"Service to check\"),\n      timeout: int = typer.Option(30, \"--timeout\", help=\"Timeout in seconds\"),\n      alert: bool = typer.Option(False, \"--alert\", help=\"Send alert if check fails\")\n  ):\n      \"\"\"\n      Checks the health of a service within a specified timeout, optionally sending alerts.\n      \"\"\"\n      pass\n\n  @app.command()\n  def search_logs(\n      keyword: str = typer.Argument(..., help=\"Keyword to search\"),\n      log_file: str = typer.Option(\"system.log\", \"--log\", help=\"Log file to search in\"),\n      case_sensitive: bool = typer.Option(False, \"--case-sensitive\", help=\"Enable case-sensitive search\")\n  ):\n      \"\"\"\n      Searches for a keyword in a log file, optionally using case-sensitive mode.\n      \"\"\"\n      pass\n\n  @app.command()\n  def stats_by_date(\n      date: str = typer.Argument(..., help=\"Date in YYYY-MM-DD to query stats\"),\n      show_raw: bool = typer.Option(False, \"--show-raw\", help=\"Display raw data\")\n  ):\n      \"\"\"\n      Shows statistics for a specific date, optionally displaying raw data.\n      \"\"\"\n      pass\n\n  @app.command()\n  def publish_update(\n      version: str = typer.Argument(..., help=\"Version tag to publish\"),\n      channel: str = typer.Option(\"stable\", \"--channel\", help=\"Release channel\"),\n      note: str = typer.Option(\"\", \"--note\", help=\"Release note or description\")\n  ):\n      \"\"\"\n      Publishes an update to a specified release channel with optional notes.\n      \"\"\"\n      pass\n\n  @app.command()\n  def check_version(\n      local_path: str = typer.Argument(..., help=\"Local path to check\"),\n      remote_url: str = typer.Option(\"\", \"--remote\", help=\"Remote URL for comparison\"),\n      detailed: bool = typer.Option(False, \"--detailed\", help=\"Show detailed version info\")\n  ):\n      \"\"\"\n      Checks the version of a local path against a remote source, optionally showing details.\n      \"\"\"\n      pass\n\n  @app.command()\n  def queue_task(\n      task_name: str = typer.Argument(..., help=\"Name of the task to queue\"),\n      priority: int = typer.Option(1, \"--priority\", help=\"Priority of the task\"),\n      delay: int = typer.Option(0, \"--delay\", help=\"Delay in seconds before starting task\")\n  ):\n      \"\"\"\n      Queues a task with a specified priority and optional delay.\n      \"\"\"\n      pass\n\n  @app.command()\n  def remove_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to remove\"),\n      force: bool = typer.Option(False, \"--force\", help=\"Remove without confirmation\")\n  ):\n      \"\"\"\n      Removes a queued task by ID, optionally forcing removal without confirmation.\n      \"\"\"\n      pass\n\n  @app.command()\n  def list_tasks(\n      show_all: bool = typer.Option(False, \"--all\", help=\"Show all tasks, including completed\"),\n      sort_by: str = typer.Option(\"priority\", \"--sort-by\", help=\"Sort tasks by this field\")\n  ):\n      \"\"\"\n      Lists tasks, optionally including completed tasks or sorting by a different field.\n      \"\"\"\n      pass\n\n  @app.command()\n  def inspect_task(\n      task_id: str = typer.Argument(..., help=\"ID of the task to inspect\"),\n      json_output: bool = typer.Option(False, \"--json\", help=\"Show output in JSON format\")\n  ):\n      \"\"\"\n      Inspects a specific task by ID, optionally in JSON format.\n      \"\"\"\n      pass\n</python-typer-commands>\n\n<stt-requests>\n  Inspect task with ID abcdef in JSON format\n</stt-requests>\n",
                    "model": "openai~o1-mini",
                    "correct": true,
                    "index": 30
                }
            ],
            "correct_count": 26,
            "incorrect_count": 4,
            "accuracy": 0.8666666666666667,
            "average_tokens_per_second": 0.0,
            "average_total_duration_ms": 4344.666666666667,
            "average_load_duration_ms": 0.0
        }
    ],
    "overall_correct_count": 136,
    "overall_incorrect_count": 14,
    "overall_accuracy": 0.9066666666666666,
    "average_tokens_per_second": 0.0,
    "average_total_duration_ms": 3574.2200000000003,
    "average_load_duration_ms": 0.0
}